/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export declare function add(a: Matrix, b: Matrix): Matrix
export declare function sub(a: Matrix, b: Matrix): Matrix
export declare function mul(a: Matrix, b: Matrix): Matrix
export declare function div(a: Matrix, b: Matrix): Matrix
export declare function neg(matrix: Matrix): Matrix
export declare function matmul(a: Matrix, b: Matrix): Matrix
export declare function clip(matrix: Matrix, min: number, max: number): Matrix
export declare function whereSelect(condition: Matrix, truthy: Matrix, falsy: Matrix): Matrix
export declare function whereSelectMulti(conditions: Array<Matrix>, choices: Array<Matrix>, defaultValue?: Matrix | undefined | null): Matrix
export declare function concat(a: Matrix, b: Matrix, axis: number): Matrix
export declare function stack(a: Matrix, b: Matrix, axis: number): Matrix
export declare function transpose(matrix: Matrix): Matrix
export declare function broadcast_to(matrix: Matrix, rows: number, cols: number): Matrix
export declare function take(matrix: Matrix, axis: number, indices: Array<number>): Matrix
export declare function put(matrix: Matrix, axis: number, indices: Array<number>, values: Matrix): Matrix
export declare function gather(matrix: Matrix, rowIndices: Array<number>, colIndices: Array<number>): Matrix
export declare function gatherPairs(matrix: Matrix, rowIndices: Array<number>, colIndices: Array<number>): Matrix
export declare function scatter(matrix: Matrix, rowIndices: Array<number>, colIndices: Array<number>, values: Matrix): Matrix
export declare function scatterPairs(matrix: Matrix, rowIndices: Array<number>, colIndices: Array<number>, values: Matrix): Matrix
export declare function svd(matrix: Matrix): object
export declare function qr(matrix: Matrix): object
export declare function solve(a: Matrix, b: Matrix): Matrix
export declare function eigen(matrix: Matrix): object
export declare function readNpy(buffer: Buffer): Matrix
export declare function writeNpy(matrix: Matrix): Buffer
export declare function copyBytesTotal(): number
export declare function takeCopyBytes(): number
export declare function resetCopyBytes(): void
export declare function sum(matrix: Matrix, dtype?: string | undefined | null): Matrix
export declare function dot(a: Matrix, b: Matrix, dtype?: string | undefined | null): Matrix
export class Matrix {
  constructor(data: Float64Array, rows: number, cols: number)
  static fromBytes(data: Buffer, rows: number, cols: number, dtype: string): Matrix
  static fromFixedI64(data: BigInt64Array, rows: number, cols: number, scale: number): Matrix
  get rows(): number
  get cols(): number
  get dtype(): string
  get fixedScale(): number | null
  astype(dtype: string, copy?: boolean | undefined | null, casting?: string | undefined | null): Matrix
  toVec(): Float64Array
  toBytes(): Buffer
}
